// This file was auto generated by ComType Tool at 2024-07-11 오후 3:58:40
// File : C:\OpenAPIG\KFOpenAPI.ocx
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace KFOpenAPI.NET
{
    [ComImport]
    [Guid("85B07632-4F84-4CEF-991D-C79DE781363D")]
    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    internal interface _DKFOpenAPI
    {
        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(1)]
        int CommConnect(int nAutoUpgrade);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(2)]
        int CommRqData([MarshalAs(UnmanagedType.BStr)] string sRQName, [MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sPrevNext, [MarshalAs(UnmanagedType.BStr)] string sScreenNo);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(3)]
        void SetInputValue([MarshalAs(UnmanagedType.BStr)] string sID, [MarshalAs(UnmanagedType.BStr)] string sValue);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(4)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetCommData([MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sRQName, int nIndex, [MarshalAs(UnmanagedType.BStr)] string sItemName);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(5)]
        void CommTerminate();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(6)]
        int GetRepeatCnt([MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sRecordName);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(7)]
        void DisconnectRealData([MarshalAs(UnmanagedType.BStr)] string sScreenNo);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(8)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetCommRealData([MarshalAs(UnmanagedType.BStr)] string sRealType, int nFid);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(9)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetChejanData(int nFid);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(10)]
        int SendOrder([MarshalAs(UnmanagedType.BStr)] string sRQName, [MarshalAs(UnmanagedType.BStr)] string sScreenNo, [MarshalAs(UnmanagedType.BStr)] string sAccNo, int nOrderType, [MarshalAs(UnmanagedType.BStr)] string sCode, int nQty, [MarshalAs(UnmanagedType.BStr)] string sPrice, [MarshalAs(UnmanagedType.BStr)] string sStopPrice, [MarshalAs(UnmanagedType.BStr)] string sHogaGb, [MarshalAs(UnmanagedType.BStr)] string sOrgOrderNo);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(11)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetLoginInfo([MarshalAs(UnmanagedType.BStr)] string sTag);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(12)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutureItemlist();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(13)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalOptionItemlist();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(14)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutureCodelist([MarshalAs(UnmanagedType.BStr)] string sItem);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(15)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalOptionCodelist([MarshalAs(UnmanagedType.BStr)] string sItem);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(16)]
        int GetConnectState();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(17)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetAPIModulePath();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(18)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetCommonFunc([MarshalAs(UnmanagedType.BStr)] string sFuncName, [MarshalAs(UnmanagedType.BStr)] string sParam);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(19)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetConvertPrice([MarshalAs(UnmanagedType.BStr)] string sCode, [MarshalAs(UnmanagedType.BStr)] string sPrice, int nType);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(20)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutOpCodeInfoByType(int nGubun, [MarshalAs(UnmanagedType.BStr)] string sType);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(21)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutOpCodeInfoByCode([MarshalAs(UnmanagedType.BStr)] string sCode);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(22)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutureItemlistByType([MarshalAs(UnmanagedType.BStr)] string sType);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(23)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutureCodeByItemMonth([MarshalAs(UnmanagedType.BStr)] string sItem, [MarshalAs(UnmanagedType.BStr)] string sMonth);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(24)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalOptionCodeByMonth([MarshalAs(UnmanagedType.BStr)] string sItem, [MarshalAs(UnmanagedType.BStr)] string sCPGubun, [MarshalAs(UnmanagedType.BStr)] string sActivePrice, [MarshalAs(UnmanagedType.BStr)] string sMonth);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(25)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalOptionMonthByItem([MarshalAs(UnmanagedType.BStr)] string sItem);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(26)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalOptionActPriceByItem([MarshalAs(UnmanagedType.BStr)] string sItem);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(27)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetGlobalFutureItemTypelist();

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(28)]
        [return: MarshalAs(UnmanagedType.BStr)]
        string GetCommFullData([MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sRecordName, int nGubun);

    }

    [ComImport]
    [Guid("952B31F8-06FD-4D5A-A021-5FF57F5030AE")]
    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    internal interface _DKFOpenAPIEvents
    {
        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(1)]
        void OnReceiveTrData([MarshalAs(UnmanagedType.BStr)] string sScrNo, [MarshalAs(UnmanagedType.BStr)] string sRQName, [MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sRecordName, [MarshalAs(UnmanagedType.BStr)] string sPreNext);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(2)]
        void OnReceiveMsg([MarshalAs(UnmanagedType.BStr)] string sScrNo, [MarshalAs(UnmanagedType.BStr)] string sRQName, [MarshalAs(UnmanagedType.BStr)] string sTrCode, [MarshalAs(UnmanagedType.BStr)] string sMsg);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(3)]
        void OnReceiveRealData([MarshalAs(UnmanagedType.BStr)] string sJongmokCode, [MarshalAs(UnmanagedType.BStr)] string sRealType, [MarshalAs(UnmanagedType.BStr)] string sRealData);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(4)]
        void OnReceiveChejanData([MarshalAs(UnmanagedType.BStr)] string sGubun, int nItemCnt, [MarshalAs(UnmanagedType.BStr)] string sFidList);

        [MethodImpl(MethodImplOptions.InternalCall | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Runtime)]
        [DispId(5)]
        void OnEventConnect(int nErrCode);

    }

    public class _DKFOpenAPIEvents_OnReceiveTrDataEventArgs(string sScrNo, string sRQName, string sTrCode, string sRecordName, string sPreNext) : EventArgs
    {
        public string sScrNo = sScrNo;
        public string sRQName = sRQName;
        public string sTrCode = sTrCode;
        public string sRecordName = sRecordName;
        public string sPreNext = sPreNext;
    }

    public class _DKFOpenAPIEvents_OnReceiveMsgEventArgs(string sScrNo, string sRQName, string sTrCode, string sMsg) : EventArgs
    {
        public string sScrNo = sScrNo;
        public string sRQName = sRQName;
        public string sTrCode = sTrCode;
        public string sMsg = sMsg;
    }

    public class _DKFOpenAPIEvents_OnReceiveRealDataEventArgs(string sJongmokCode, string sRealType, string sRealData) : EventArgs
    {
        public string sJongmokCode = sJongmokCode;
        public string sRealType = sRealType;
        public string sRealData = sRealData;
    }

    public class _DKFOpenAPIEvents_OnReceiveChejanDataEventArgs(string sGubun, int nItemCnt, string sFidList) : EventArgs
    {
        public string sGubun = sGubun;
        public int nItemCnt = nItemCnt;
        public string sFidList = sFidList;
    }

    public class _DKFOpenAPIEvents_OnEventConnectEventArgs(int nErrCode) : EventArgs
    {
        public int nErrCode = nErrCode;
    }

    [ClassInterface(ClassInterfaceType.None)]
    internal class AxKFOpenAPIEventMulticaster(AxKFOpenAPI parent) : _DKFOpenAPIEvents
    {
        public void OnReceiveTrData(string sScrNo, string sRQName, string sTrCode, string sRecordName, string sPreNext) => parent.RaiseOnReceiveTrData(this, new(sScrNo, sRQName, sTrCode, sRecordName, sPreNext));
        public void OnReceiveMsg(string sScrNo, string sRQName, string sTrCode, string sMsg) => parent.RaiseOnReceiveMsg(this, new(sScrNo, sRQName, sTrCode, sMsg));
        public void OnReceiveRealData(string sJongmokCode, string sRealType, string sRealData) => parent.RaiseOnReceiveRealData(this, new(sJongmokCode, sRealType, sRealData));
        public void OnReceiveChejanData(string sGubun, int nItemCnt, string sFidList) => parent.RaiseOnReceiveChejanData(this, new(sGubun, nItemCnt, sFidList));
        public void OnEventConnect(int nErrCode) => parent.RaiseOnEventConnect(this, new(nErrCode));
    }

    public class AxKFOpenAPI
    {
        public const string CLSID = "{D1ACAB7D-A3AF-49E4-9004-C9E98344E17A}";
        public const string PROGID = "KFOPENAPI.KFOpenAPICtrl.1";

        private readonly _DKFOpenAPI ocx;

        public event EventHandler<_DKFOpenAPIEvents_OnReceiveTrDataEventArgs> OnReceiveTrData;
        public event EventHandler<_DKFOpenAPIEvents_OnReceiveMsgEventArgs> OnReceiveMsg;
        public event EventHandler<_DKFOpenAPIEvents_OnReceiveRealDataEventArgs> OnReceiveRealData;
        public event EventHandler<_DKFOpenAPIEvents_OnReceiveChejanDataEventArgs> OnReceiveChejanData;
        public event EventHandler<_DKFOpenAPIEvents_OnEventConnectEventArgs> OnEventConnect;

        internal void RaiseOnReceiveTrData(object sender, _DKFOpenAPIEvents_OnReceiveTrDataEventArgs e) => OnReceiveTrData?.Invoke(this, e);
        internal void RaiseOnReceiveMsg(object sender, _DKFOpenAPIEvents_OnReceiveMsgEventArgs e) => OnReceiveMsg?.Invoke(this, e);
        internal void RaiseOnReceiveRealData(object sender, _DKFOpenAPIEvents_OnReceiveRealDataEventArgs e) => OnReceiveRealData?.Invoke(this, e);
        internal void RaiseOnReceiveChejanData(object sender, _DKFOpenAPIEvents_OnReceiveChejanDataEventArgs e) => OnReceiveChejanData?.Invoke(this, e);
        internal void RaiseOnEventConnect(object sender, _DKFOpenAPIEvents_OnEventConnectEventArgs e) => OnEventConnect?.Invoke(this, e);

        public int CommConnect(int nAutoUpgrade) => ocx.CommConnect(nAutoUpgrade);
        public int CommRqData(string sRQName, string sTrCode, string sPrevNext, string sScreenNo) => ocx.CommRqData(sRQName, sTrCode, sPrevNext, sScreenNo);
        public void SetInputValue(string sID, string sValue) => ocx.SetInputValue(sID, sValue);
        public string GetCommData(string sTrCode, string sRQName, int nIndex, string sItemName) => ocx.GetCommData(sTrCode, sRQName, nIndex, sItemName);
        public void CommTerminate() => ocx.CommTerminate();
        public int GetRepeatCnt(string sTrCode, string sRecordName) => ocx.GetRepeatCnt(sTrCode, sRecordName);
        public void DisconnectRealData(string sScreenNo) => ocx.DisconnectRealData(sScreenNo);
        public string GetCommRealData(string sRealType, int nFid) => ocx.GetCommRealData(sRealType, nFid);
        public string GetChejanData(int nFid) => ocx.GetChejanData(nFid);
        public int SendOrder(string sRQName, string sScreenNo, string sAccNo, int nOrderType, string sCode, int nQty, string sPrice, string sStopPrice, string sHogaGb, string sOrgOrderNo) => ocx.SendOrder(sRQName, sScreenNo, sAccNo, nOrderType, sCode, nQty, sPrice, sStopPrice, sHogaGb, sOrgOrderNo);
        public string GetLoginInfo(string sTag) => ocx.GetLoginInfo(sTag);
        public string GetGlobalFutureItemlist() => ocx.GetGlobalFutureItemlist();
        public string GetGlobalOptionItemlist() => ocx.GetGlobalOptionItemlist();
        public string GetGlobalFutureCodelist(string sItem) => ocx.GetGlobalFutureCodelist(sItem);
        public string GetGlobalOptionCodelist(string sItem) => ocx.GetGlobalOptionCodelist(sItem);
        public int GetConnectState() => ocx.GetConnectState();
        public string GetAPIModulePath() => ocx.GetAPIModulePath();
        public string GetCommonFunc(string sFuncName, string sParam) => ocx.GetCommonFunc(sFuncName, sParam);
        public string GetConvertPrice(string sCode, string sPrice, int nType) => ocx.GetConvertPrice(sCode, sPrice, nType);
        public string GetGlobalFutOpCodeInfoByType(int nGubun, string sType) => ocx.GetGlobalFutOpCodeInfoByType(nGubun, sType);
        public string GetGlobalFutOpCodeInfoByCode(string sCode) => ocx.GetGlobalFutOpCodeInfoByCode(sCode);
        public string GetGlobalFutureItemlistByType(string sType) => ocx.GetGlobalFutureItemlistByType(sType);
        public string GetGlobalFutureCodeByItemMonth(string sItem, string sMonth) => ocx.GetGlobalFutureCodeByItemMonth(sItem, sMonth);
        public string GetGlobalOptionCodeByMonth(string sItem, string sCPGubun, string sActivePrice, string sMonth) => ocx.GetGlobalOptionCodeByMonth(sItem, sCPGubun, sActivePrice, sMonth);
        public string GetGlobalOptionMonthByItem(string sItem) => ocx.GetGlobalOptionMonthByItem(sItem);
        public string GetGlobalOptionActPriceByItem(string sItem) => ocx.GetGlobalOptionActPriceByItem(sItem);
        public string GetGlobalFutureItemTypelist() => ocx.GetGlobalFutureItemTypelist();
        public string GetCommFullData(string sTrCode, string sRecordName, int nGubun) => ocx.GetCommFullData(sTrCode, sRecordName, nGubun);

        #region 생성자

        [DllImport("Atl.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        private static extern bool AtlAxWinInit();
        [DllImport("Atl.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        private static extern int AtlAxGetControl(IntPtr h, [MarshalAs(UnmanagedType.IUnknown)] out object pp);
        [DllImport("User32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        private static extern IntPtr CreateWindowEx(int dwExStyle, string lpClassName, string lpWindowName, int dwStyle, int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, IntPtr hInstance, IntPtr lpParam);
        [DllImport("User32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
        private static extern bool DestroyWindow(IntPtr hWnd);
        [DllImport("kernel32.dll")]
        private static extern IntPtr GetConsoleWindow();
        private readonly IntPtr hWndContainer = IntPtr.Zero;
        private readonly System.Runtime.InteropServices.ComTypes.IConnectionPoint _pConnectionPoint;

        public bool Created { get; private set; }

        public AxKFOpenAPI(nint hWndParent)
        {
            if (AtlAxWinInit())
            {
                const int WS_VISIBLE = 0x10000000;
                const int WS_CHILD = 0x40000000;
                const int CTRL_ID = 9005;
                hWndContainer = CreateWindowEx(0, "AtlAxWin", CLSID, WS_VISIBLE | WS_CHILD, -100, -100, 20, 20, hWndParent, (IntPtr)CTRL_ID, IntPtr.Zero, IntPtr.Zero);
                if (hWndContainer != IntPtr.Zero)
                {
                    try
                    {
                        AtlAxGetControl(hWndContainer, out object pUnknown);
                        if (pUnknown != null)
                        {
                            ocx = (_DKFOpenAPI)pUnknown;
                            if (ocx != null)
                            {
                                Guid guidEvents = typeof(_DKFOpenAPIEvents).GUID;
                                var pConnectionPointContainer = (System.Runtime.InteropServices.ComTypes.IConnectionPointContainer)pUnknown;
                                pConnectionPointContainer.FindConnectionPoint(ref guidEvents, out _pConnectionPoint);
                                if (_pConnectionPoint != null)
                                {
                                    AxKFOpenAPIEventMulticaster pEventSink = new(this);
                                    _pConnectionPoint.Advise(pEventSink, out int nCookie);
                                    Created = true;
                                }
                            }
                        }
                    }
                    catch (Exception)
                    {
                        DestroyWindow(hWndContainer);
                        hWndContainer = IntPtr.Zero;
                    }
                }
            }
        }
        #endregion

        #region 비동기 확장함수 추가

        class AsyncNode(object[] objs)
        {
            public readonly int _ident_id = GetIdentId(objs);

            public static int GetIdentId(object[] objs)
            {
                int id = 0;
                for (int i = 0; i < objs.Length; i++) id = id * 31 + objs[i].GetHashCode();
                return id;
            }

            public readonly ManualResetEvent _async_wait = new(initialState: false);
            // 이벤트 콜백 정의
        }

        private readonly List<AsyncNode> _async_list = [];
        private int _async_TimeOut = 5000;
        public int AsyncTimeOut
        {
            get => _async_TimeOut;
            set => _async_TimeOut = (value < 1000) ? 1000 : value;
        }

        #endregion
    }

}

